- Path tracker: Make it a module

#CH01 = SQL:
- Track data: get the map sizes, deadends of the map, the final path that has been taken with it's points.
- testing phase:
  1. Working on the data entry, date coordinates, dimensions
  Note: Write an exception, so the db would not be created if not intended
  variables:
    - Deminsions: cols, rows, and scale
    - Characteristic: n_options, options, taken_options
    - deadend: True or False
#CH02 = visualizer:
Is an visualization of the way the whole process works and it is also responsible
for all the logging stuff.
  - Optimization: imagine that the object has moved in a certain way which after
  finding the right path, it is found that there have been some extra steps that
  the mover has taken that would have not affected the whole process and there
  are basically redundant to take those steps, this should be analyzed by the
  object and also it should be predicted in the future to avoid or predict if a
  move is going to be redundant or not?

#CH03 = Lets set a mode where it just tracks the users input and by doing so an algorithm
could be developed as well as debugging for the tracking process
store the number of options and then subtract from it when a move has been made
then go back into the option numbers and find the new path that it is partially located in the
previous path

#Ch04 =  Restructuring the whole thing in a more neat way, separate the map and
mover module and their interaction should be limited to the main.py file.
#CH05 = Validation problems: if the maze is actually solvable or if there is
dead end from the beginning

-- Change the priority list for dead end protocols.
